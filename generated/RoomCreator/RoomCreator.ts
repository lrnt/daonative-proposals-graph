// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RoomCreated extends ethereum.Event {
  get params(): RoomCreated__Params {
    return new RoomCreated__Params(this);
  }
}

export class RoomCreated__Params {
  _event: RoomCreated;

  constructor(event: RoomCreated) {
    this._event = event;
  }

  get newRoom(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoomCreator extends ethereum.SmartContract {
  static bind(address: Address): RoomCreator {
    return new RoomCreator("RoomCreator", address);
  }

  allRooms(param0: BigInt): Address {
    let result = super.call("allRooms", "allRooms(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allRooms(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allRooms", "allRooms(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createRoom(_URI: string): Address {
    let result = super.call("createRoom", "createRoom(string):(address)", [
      ethereum.Value.fromString(_URI)
    ]);

    return result[0].toAddress();
  }

  try_createRoom(_URI: string): ethereum.CallResult<Address> {
    let result = super.tryCall("createRoom", "createRoom(string):(address)", [
      ethereum.Value.fromString(_URI)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRooms(): Array<Address> {
    let result = super.call("getRooms", "getRooms():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getRooms(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getRooms", "getRooms():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class CreateRoomCall extends ethereum.Call {
  get inputs(): CreateRoomCall__Inputs {
    return new CreateRoomCall__Inputs(this);
  }

  get outputs(): CreateRoomCall__Outputs {
    return new CreateRoomCall__Outputs(this);
  }
}

export class CreateRoomCall__Inputs {
  _call: CreateRoomCall;

  constructor(call: CreateRoomCall) {
    this._call = call;
  }

  get _URI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateRoomCall__Outputs {
  _call: CreateRoomCall;

  constructor(call: CreateRoomCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
